#!/bin/sh
#
# Copyright (C) 2000-2020 Kern Sibbald
# License: BSD 2-Clause; see file LICENSE-FOSS
#
# Cloud test. We run backups and restore with the "truncate cache" command in-between
#
TestName="cloud-test"
JobName=NightlySave
. scripts/functions

require_cloud

#config is required for cloud cleanup
scripts/copy-test-confs
scripts/cleanup

FORCE_FILE_SET=${FORCE_FILE_SET:-"${cwd}/build"}
echo "$FORCE_FILE_SET" >${cwd}/tmp/file-list

start_test

$bperl -e 'add_attribute("$conf/bacula-sd.conf", "MaximumPartSize", "10000000", "Device")'
$bperl -e 'add_attribute("$conf/bacula-sd.conf", "MaximumUploadBandwidth", "4MB/s", "Cloud")'
$bperl -e 'add_attribute("$conf/bacula-sd.conf", "MaximumDownloadBandwidth", "4MB/s", "Cloud")'


cat <<END_OF_DATA >${cwd}/tmp/bconcmds
@output /dev/null
messages
@$out ${cwd}/tmp/log1.out
label storage=File volume=Vol1
END_OF_DATA

# do label
run_bacula

cat <<END_OF_DATA >${cwd}/tmp/bconcmds
@output /dev/null
messages
@$out ${cwd}/tmp/log1.out
@#setdebug level=500 storage
run job=$JobName level=Full yes
wait
list volumes
llist volume=Vol1
messages
truncate cache volume=Vol1 storage=File
END_OF_DATA

for i in 1 2 ; do
  echo "Running job $i"
  run_bconsole
  ls -l tmp/Vol*
done

cat <<END_OF_DATA >${cwd}/tmp/bconcmds-form
@# 
@# now do a restore
@#
@$out ${cwd}/tmp/log2.out
@#setdebug level=200 client
@#setdebug level=350 storage
truncate cache volume=Vol1 storage=File
@exec "ls -l ${cwd}/tmp/Vol1"
restore where=${cwd}/tmp/bacula-restores storage=File jobid=@jobid@
mark *
done
yes
wait
messages
sql
select * from JobMedia;

@$out $tmp/log31.out
cloud list storage=File
@$out $tmp/log3.out
cloud list volume=Vol1 storage=File
quit
END_OF_DATA

# Restore and check each job
for i in 2; do
   rm -rf ${cwd}/tmp/bacula-restores $tmp/log3*out
   echo "s%@jobid@%$i%" >${cwd}/tmp/in
   sed -f ${cwd}/tmp/in ${cwd}/tmp/bconcmds-form >${cwd}/tmp/bconcmds
   run_bconsole
   nb=`cat $tmp/log3.out | wc -l`
   if [ "$nb" -lt 10 ]; then
       print_debug "ERROR: Not enough lines in $tmp/log3.out for the parts list"
       estat=1
   fi
   grep Vol1 $tmp/log31.out > /dev/null
   if [ $? -ne 0 ]; then
       print_debug "ERROR: Unable to find the volume list in $tmp/log31.out"
       estat=1
   fi
done

ls -l tmp/Vol* >>${cwd}/tmp/log5.out
ls -l ${cwd}/tmp/Vol1

sleep 2
check_for_zombie_jobs storage=File 
stop_bacula

check_two_logs
#check_restore_diff

$rscripts/diff.pl -s "$FORCE_FILE_SET" -d "$cwd/tmp/bacula-restores/$FORCE_FILE_SET"
if test $? -ne 0; then
    dstat=$?
fi

end_test
