--- /dev/null	1969-12-31 16:00:00.000000000 -0800
+++ Makefile.msvc	2006-11-23 12:38:22.724805900 -0800
@@ -0,0 +1,136 @@
+#!/usr/make
+#
+# Makefile for SQLITE
+#
+# This is a template makefile for SQLite.  Most people prefer to
+# use the autoconf generated "configure" script to generate the
+# makefile automatically.  But that does not work for everybody
+# and in every situation.  If you are having problems with the
+# "configure" script, you might want to try this makefile as an
+# alternative.  Create a copy of this file, edit the parameters
+# below and type "make".
+#
+
+#### The toplevel directory of the source tree.  This is the directory
+#    that contains this "Makefile.in" and the "configure.in" script.
+#
+TOP = ..
+
+#### C Compiler and options for use in building executables that
+#    will run on the platform that is doing the build.
+#
+BCC = cl /Zi /Ox /Gy /MD
+#BCC = /opt/ancic/bin/c89 -0
+
+#### If the target operating system supports the "usleep()" system
+#    call, then define the HAVE_USLEEP macro for all C modules.
+#
+USLEEP = 
+#USLEEP = -DHAVE_USLEEP=1
+
+#### If you want the SQLite library to be safe for use within a 
+#    multi-threaded program, then define the following macro
+#    appropriately:
+#
+THREADSAFE = -DTHREADSAFE=1
+#THREADSAFE = -DTHREADSAFE=0
+
+#### Specify any extra linker options needed to make the library
+#    thread safe
+#
+#THREADLIB = -lpthread
+THREADLIB = 
+
+#### Specify any extra libraries needed to access required functions.
+#
+#TLIBS = -lrt    # fdatasync on Solaris 8
+TLIBS = 
+
+#### Leave SQLITE_DEBUG undefined for maximum speed.  Use SQLITE_DEBUG=1
+#    to check for memory leaks.  Use SQLITE_DEBUG=2 to print a log of all
+#    malloc()s and free()s in order to track down memory leaks.
+#    
+#    SQLite uses some expensive assert() statements in the inner loop.
+#    You can make the library go almost twice as fast if you compile
+#    with -DNDEBUG=1
+#
+#OPTS = -DSQLITE_DEBUG=2
+#OPTS = -DSQLITE_DEBUG=1
+#OPTS = 
+OPTS = -DNDEBUG=1 -D_CRT_SECURE_NO_DEPRECATE
+#OPTS += -DHAVE_FDATASYNC=1
+
+#### The suffix to add to executable files.  ".exe" for windows.
+#    Nothing for unix.
+#
+EXE = .exe
+#EXE =
+
+#### C Compile and options for use in building executables that 
+#    will run on the target platform.  This is usually the same
+#    as BCC, unless you are cross-compiling.
+#
+#TCC = gcc -O6
+#TCC = gcc -g -O0 -Wall
+#TCC = gcc -g -O0 -Wall -fprofile-arcs -ftest-coverage
+#TCC = /opt/mingw/bin/i386-mingw32-gcc -O6
+#TCC = /opt/ansic/bin/c89 -O +z -Wl,-a,archive
+TCC = cl /Zi /Ox /Gy /MD
+
+#### Tools used to build a static library.
+#
+AR = lib
+#AR = /opt/mingw/bin/i386-mingw32-ar cr
+#RANLIB = ranlib
+#RANLIB = /opt/mingw/bin/i386-mingw32-ranlib
+
+#MKSHLIB = gcc -shared
+#SO = so
+#SHPREFIX = lib
+SO = dll
+SHPREFIX =
+
+#### Extra compiler options needed for programs that use the TCL library.
+#
+#TCL_FLAGS =
+#TCL_FLAGS = -DSTATIC_BUILD=1
+#TCL_FLAGS = -I/home/drh/tcltk/8.4linux
+#TCL_FLAGS = -I/home/drh/tcltk/8.4win -DSTATIC_BUILD=1
+#TCL_FLAGS = -I/home/drh/tcltk/8.3hpux
+
+#### Linker options needed to link against the TCL library.
+#
+#LIBTCL = -ltcl -lm -ldl
+#LIBTCL = /home/drh/tcltk/8.4linux/libtcl8.4g.a -lm -ldl
+#LIBTCL = /home/drh/tcltk/8.4win/libtcl84s.a -lmsvcrt
+#LIBTCL = /home/drh/tcltk/8.3hpux/libtcl8.3.a -ldld -lm -lc
+
+#### Compiler options needed for programs that use the readline() library.
+#
+READLINE_FLAGS =
+#READLINE_FLAGS = -DHAVE_READLINE=1 -I/usr/include/readline
+
+#### Linker options needed by programs using readline() must link against.
+#
+LIBREADLINE =
+#LIBREADLINE = -static -lreadline -ltermcap
+
+#### Should the database engine assume text is coded as UTF-8 or iso8859?
+#
+ENCODING  = UTF8
+#ENCODING = ISO8859
+
+
+#### Which "awk" program provides nawk compatibilty
+#
+NAWK = nawk
+# NAWK = awk
+
+#### Where to install
+BINDIR = /usr/bin
+LIBDIR = /usr/lib
+INCDIR = /usr/include
+
+# You should not have to change anything below this line
+###############################################################################
+include ../main.mk.msvc
--- /dev/null	1969-12-31 16:00:00.000000000 -0800
+++ main.mk.msvc	2006-11-23 12:38:22.709180800 -0800
@@ -0,0 +1,619 @@
+###############################################################################
+# The following macros should be defined before this script is
+# invoked:
+#
+# TOP              The toplevel directory of the source tree.  This is the
+#                  directory that contains this "Makefile.in" and the
+#                  "configure.in" script.
+#
+# BCC              C Compiler and options for use in building executables that
+#                  will run on the platform that is doing the build.
+#
+# USLEEP           If the target operating system supports the "usleep()" system
+#                  call, then define the HAVE_USLEEP macro for all C modules.
+#
+# THREADSAFE       If you want the SQLite library to be safe for use within a 
+#                  multi-threaded program, then define the following macro
+#                  appropriately:
+#
+# THREADLIB        Specify any extra linker options needed to make the library
+#                  thread safe
+#
+# OPTS             Extra compiler command-line options.
+#
+# EXE              The suffix to add to executable files.  ".exe" for windows
+#                  and "" for Unix.
+#
+# TCC              C Compiler and options for use in building executables that 
+#                  will run on the target platform.  This is usually the same
+#                  as BCC, unless you are cross-compiling.
+#
+# AR               Tools used to build a static library.
+# RANLIB
+#
+# TCL_FLAGS        Extra compiler options needed for programs that use the
+#                  TCL library.
+#
+# LIBTCL           Linker options needed to link against the TCL library.
+#
+# READLINE_FLAGS   Compiler options needed for programs that use the
+#                  readline() library.
+#
+# LIBREADLINE      Linker options needed by programs using readline() must
+#                  link against.
+#
+# NAWK             Nawk compatible awk program.  Older (obsolete?) solaris
+#                  systems need this to avoid using the original AT&T AWK.
+#
+# Once the macros above are defined, the rest of this make script will
+# build the SQLite library and testing tools.
+################################################################################
+
+# This is how we compile
+#
+TCCX = $(TCC) $(OPTS) $(THREADSAFE) $(USLEEP) -I. -I$(TOP)/src
+
+# Object files for the SQLite library.
+#
+LIBOBJ = alter.obj analyze.obj attach.obj auth.obj btree.obj build.obj \
+         callback.obj complete.obj date.obj delete.obj \
+         expr.obj func.obj hash.obj insert.obj loadext.obj \
+         main.obj opcodes.obj os.obj os_os2.obj os_unix.obj os_win.obj \
+         pager.obj parse.obj pragma.obj prepare.obj printf.obj random.obj \
+         select.obj table.obj tokenize.obj trigger.obj \
+         update.obj util.obj vacuum.obj \
+         vdbe.obj vdbeapi.obj vdbeaux.obj vdbefifo.obj vdbemem.obj \
+         where.obj utf.obj legacy.obj vtab.obj
+#        tclsqlite.obj 
+
+#
+# All of the source code files.
+#
+SRC = \
+  $(TOP)/src/alter.c \
+  $(TOP)/src/analyze.c \
+  $(TOP)/src/attach.c \
+  $(TOP)/src/auth.c \
+  $(TOP)/src/btree.c \
+  $(TOP)/src/btree.h \
+  $(TOP)/src/build.c \
+  $(TOP)/src/callback.c \
+  $(TOP)/src/complete.c \
+  $(TOP)/src/date.c \
+  $(TOP)/src/delete.c \
+  $(TOP)/src/expr.c \
+  $(TOP)/src/func.c \
+  $(TOP)/src/hash.c \
+  $(TOP)/src/hash.h \
+  $(TOP)/src/insert.c \
+  $(TOP)/src/legacy.c \
+  $(TOP)/src/loadext.c \
+  $(TOP)/src/main.c \
+  $(TOP)/src/os.c \
+  $(TOP)/src/os_os2.c \
+  $(TOP)/src/os_unix.c \
+  $(TOP)/src/os_win.c \
+  $(TOP)/src/pager.c \
+  $(TOP)/src/pager.h \
+  $(TOP)/src/parse.y \
+  $(TOP)/src/pragma.c \
+  $(TOP)/src/prepare.c \
+  $(TOP)/src/printf.c \
+  $(TOP)/src/random.c \
+  $(TOP)/src/select.c \
+  $(TOP)/src/shell.c \
+  $(TOP)/src/sqlite.h.in \
+  $(TOP)/src/sqliteInt.h \
+  $(TOP)/src/table.c \
+  $(TOP)/src/tclsqlite.c \
+  $(TOP)/src/tokenize.c \
+  $(TOP)/src/trigger.c \
+  $(TOP)/src/utf.c \
+  $(TOP)/src/update.c \
+  $(TOP)/src/util.c \
+  $(TOP)/src/vacuum.c \
+  $(TOP)/src/vdbe.c \
+  $(TOP)/src/vdbe.h \
+  $(TOP)/src/vdbeapi.c \
+  $(TOP)/src/vdbeaux.c \
+  $(TOP)/src/vdbefifo.c \
+  $(TOP)/src/vdbemem.c \
+  $(TOP)/src/vdbeInt.h \
+  $(TOP)/src/vtab.c \
+  $(TOP)/src/where.c
+
+# Source code for extensions
+#
+SRC = \
+  $(TOP)/ext/fts1/fts1.c \
+  $(TOP)/ext/fts1/fts1.h \
+  $(TOP)/ext/fts1/fts1_hash.c \
+  $(TOP)/ext/fts1/fts1_hash.h \
+  $(TOP)/ext/fts1/fts1_porter.c \
+  $(TOP)/ext/fts1/fts1_tokenizer.h \
+  $(TOP)/ext/fts1/fts1_tokenizer1.c
+
+
+# Source code to the test files.
+#
+TESTSRC = \
+  $(TOP)/src/btree.c \
+  $(TOP)/src/date.c \
+  $(TOP)/src/func.c \
+  $(TOP)/src/main.c \
+  $(TOP)/src/os.c \
+  $(TOP)/src/os_os2.c \
+  $(TOP)/src/os_unix.c \
+  $(TOP)/src/os_win.c \
+  $(TOP)/src/pager.c \
+  $(TOP)/src/pragma.c \
+  $(TOP)/src/printf.c \
+  $(TOP)/src/test1.c \
+  $(TOP)/src/test2.c \
+  $(TOP)/src/test3.c \
+  $(TOP)/src/test4.c \
+  $(TOP)/src/test5.c \
+  $(TOP)/src/test6.c \
+  $(TOP)/src/test7.c \
+  $(TOP)/src/test8.c \
+  $(TOP)/src/test_autoext.c \
+  $(TOP)/src/test_async.c \
+  $(TOP)/src/test_md5.c \
+  $(TOP)/src/test_schema.c \
+  $(TOP)/src/test_server.c \
+  $(TOP)/src/test_tclvar.c \
+  $(TOP)/src/utf.c \
+  $(TOP)/src/util.c \
+  $(TOP)/src/vdbe.c \
+  $(TOP)/src/vdbeaux.c \
+  $(TOP)/src/where.c
+
+# Header files used by all library source files.
+#
+HDR = \
+   sqlite3.h  \
+   $(TOP)/src/btree.h \
+   $(TOP)/src/hash.h \
+   opcodes.h \
+   $(TOP)/src/os.h \
+   $(TOP)/src/os_common.h \
+   $(TOP)/src/sqlite3ext.h \
+   $(TOP)/src/sqliteInt.h  \
+   $(TOP)/src/vdbe.h \
+   parse.h
+
+# Header files used by extensions
+#
+HDR = \
+  $(TOP)/ext/fts1/fts1.h \
+  $(TOP)/ext/fts1/fts1_hash.h \
+  $(TOP)/ext/fts1/fts1_tokenizer.h
+
+
+# Header files used by the VDBE submodule
+#
+VDBEHDR = \
+   $(HDR) \
+   $(TOP)/src/vdbeInt.h
+
+# This is the default Makefile target.  The objects listed here
+# are what get build when you type just "make" with no arguments.
+#
+all:	sqlite3.h parse.h opcodes.h sqlite3.lib sqlite3$(EXE)
+
+# Generate the file "last_change" which contains the date of change
+# of the most recently modified source code file
+#
+last_change:	$(SRC)
+	cat $(SRC) | grep '$Id: ' | sort -k 5 | tail -1 \
+          | $(NAWK) '{print $5,$6}' >last_change
+
+sqlite3.lib:	$(LIBOBJ)
+	$(AR) /out:sqlite3.lib $(LIBOBJ)
+
+sqlite3$(EXE):	$(TOP)/src/shell.c sqlite3.lib sqlite3.h
+	$(TCCX) $(READLINE_FLAGS) /Fesqlite3$(EXE) $(TOP)/src/shell.c \
+		sqlite3.lib $(LIBREADLINE) $(TLIBS) $(THREADLIB)
+
+objects: $(LIBOBJ_ORIG)
+
+# This target creates a directory named "tsrc" and fills it with
+# copies of all of the C source code and header files needed to
+# build on the target system.  Some of the C source code and header
+# files are automatically generated.  This target takes care of
+# all that automatic generation.
+#
+target_source:	$(SRC) $(VDBEHDR) opcodes.c keywordhash.h
+	rd /s /q tsrc
+	mkdir tsrc
+	copy $(SRC) $(VDBEHDR) tsrc
+	del tsrc\sqlite.h.in tsrc\parse.y
+	copy parse.c opcodes.c keywordhash.h tsrc
+
+# Rules to build the LEMON compiler generator
+#
+lemon:	$(TOP)/tool/lemon.c $(TOP)/tool/lempar.c
+	$(BCC) /Felemon $(OPTS) $(TOP)/tool/lemon.c
+	copy $(TOP)\tool\lempar.c .
+
+# Rules to build individual files
+#
+alter.obj:	$(TOP)/src/alter.c $(HDR)
+	$(TCCX) -c $(TOP)/src/alter.c
+
+analyze.obj:	$(TOP)/src/analyze.c $(HDR)
+	$(TCCX) -c $(TOP)/src/analyze.c
+
+attach.obj:	$(TOP)/src/attach.c $(HDR)
+	$(TCCX) -c $(TOP)/src/attach.c
+
+auth.obj:	$(TOP)/src/auth.c $(HDR)
+	$(TCCX) -c $(TOP)/src/auth.c
+
+btree.obj:	$(TOP)/src/btree.c $(HDR) $(TOP)/src/pager.h
+	$(TCCX) -c $(TOP)/src/btree.c
+
+build.obj:	$(TOP)/src/build.c $(HDR)
+	$(TCCX) -c $(TOP)/src/build.c
+
+callback.obj:	$(TOP)/src/callback.c $(HDR)
+	$(TCCX) -c $(TOP)/src/callback.c
+
+complete.obj:	$(TOP)/src/complete.c $(HDR)
+	$(TCCX) -c $(TOP)/src/complete.c
+
+date.obj:	$(TOP)/src/date.c $(HDR)
+	$(TCCX) -c $(TOP)/src/date.c
+
+delete.obj:	$(TOP)/src/delete.c $(HDR)
+	$(TCCX) -c $(TOP)/src/delete.c
+
+expr.obj:	$(TOP)/src/expr.c $(HDR)
+	$(TCCX) -c $(TOP)/src/expr.c
+
+func.obj:	$(TOP)/src/func.c $(HDR)
+	$(TCCX) -c $(TOP)/src/func.c
+
+hash.obj:	$(TOP)/src/hash.c $(HDR)
+	$(TCCX) -c $(TOP)/src/hash.c
+
+insert.obj:	$(TOP)/src/insert.c $(HDR)
+	$(TCCX) -c $(TOP)/src/insert.c
+
+legacy.obj:	$(TOP)/src/legacy.c $(HDR)
+	$(TCCX) -c $(TOP)/src/legacy.c
+
+loadext.obj:	$(TOP)/src/loadext.c $(HDR)
+	$(TCCX) -c $(TOP)/src/loadext.c
+
+main.obj:	$(TOP)/src/main.c $(HDR)
+	$(TCCX) -c $(TOP)/src/main.c
+
+pager.obj:	$(TOP)/src/pager.c $(HDR) $(TOP)/src/pager.h
+	$(TCCX) -c $(TOP)/src/pager.c
+
+opcodes.obj:	opcodes.c
+	$(TCCX) -c opcodes.c
+
+opcodes.c:	opcodes.h $(TOP)/mkopcodec.awk
+	sort -n -b -k 3 opcodes.h | $(NAWK) -f $(TOP)/mkopcodec.awk >opcodes.c
+
+opcodes.h:	parse.h $(TOP)/src/vdbe.c $(TOP)/mkopcodeh.awk
+	copy parse.h+$(TOP)\src\vdbe.c input.tmp
+	$(NAWK) -f $(TOP)/mkopcodeh.awk <input.tmp >opcodes.h
+	del input.tmp
+
+os.obj:	$(TOP)/src/os.c $(HDR)
+	$(TCCX) -c $(TOP)/src/os.c
+
+os_os2.obj:	$(TOP)/src/os_os2.c $(HDR)
+	$(TCCX) -c $(TOP)/src/os_os2.c
+
+os_unix.obj:	$(TOP)/src/os_unix.c $(HDR)
+	$(TCCX) -c $(TOP)/src/os_unix.c
+
+os_win.obj:	$(TOP)/src/os_win.c $(HDR)
+	$(TCCX) -c $(TOP)/src/os_win.c
+
+parse.obj:	parse.c $(HDR)
+	$(TCCX) -c parse.c
+
+#parse.h:	parse.c
+
+parse.c parse.h:	$(TOP)/src/parse.y lemon $(TOP)/addopcodes.awk
+	copy $(TOP)\src\parse.y .
+	lemon $(OPTS) parse.y
+	ren parse.h parse.h.temp
+	nawk -f $(TOP)/addopcodes.awk parse.h.temp >parse.h
+	del parse.h.temp
+
+pragma.obj:	$(TOP)/src/pragma.c $(HDR)
+	$(TCCX) $(TCL_FLAGS) -c $(TOP)/src/pragma.c
+
+prepare.obj:	$(TOP)/src/prepare.c $(HDR)
+	$(TCCX) $(TCL_FLAGS) -c $(TOP)/src/prepare.c
+
+printf.obj:	$(TOP)/src/printf.c $(HDR)
+	$(TCCX) $(TCL_FLAGS) -c $(TOP)/src/printf.c
+
+random.obj:	$(TOP)/src/random.c $(HDR)
+	$(TCCX) -c $(TOP)/src/random.c
+
+select.obj:	$(TOP)/src/select.c $(HDR)
+	$(TCCX) -c $(TOP)/src/select.c
+
+sqlite3.h:	$(TOP)/src/sqlite.h.in 
+	..\update_ver $(TOP)\src\sqlite.h.in >sqlite3.h
+
+table.obj:	$(TOP)/src/table.c $(HDR)
+	$(TCCX) -c $(TOP)/src/table.c
+
+tclsqlite.obj:	$(TOP)/src/tclsqlite.c $(HDR)
+	$(TCCX) $(TCL_FLAGS) -c $(TOP)/src/tclsqlite.c
+
+tokenize.obj:	$(TOP)/src/tokenize.c keywordhash.h $(HDR)
+	$(TCCX) -c $(TOP)/src/tokenize.c
+
+keywordhash.h:	$(TOP)/tool/mkkeywordhash.c
+	$(BCC) /Femkkeywordhash $(OPTS) $(TOP)/tool/mkkeywordhash.c
+	mkkeywordhash >keywordhash.h
+
+trigger.obj:	$(TOP)/src/trigger.c $(HDR)
+	$(TCCX) -c $(TOP)/src/trigger.c
+
+update.obj:	$(TOP)/src/update.c $(HDR)
+	$(TCCX) -c $(TOP)/src/update.c
+
+utf.obj:	$(TOP)/src/utf.c $(HDR)
+	$(TCCX) -c $(TOP)/src/utf.c
+
+util.obj:	$(TOP)/src/util.c $(HDR)
+	$(TCCX) -c $(TOP)/src/util.c
+
+vacuum.obj:	$(TOP)/src/vacuum.c $(HDR)
+	$(TCCX) -c $(TOP)/src/vacuum.c
+
+vdbe.obj:	$(TOP)/src/vdbe.c $(VDBEHDR)
+	$(TCCX) -c $(TOP)/src/vdbe.c
+
+vdbeapi.obj:	$(TOP)/src/vdbeapi.c $(VDBEHDR)
+	$(TCCX) -c $(TOP)/src/vdbeapi.c
+
+vdbeaux.obj:	$(TOP)/src/vdbeaux.c $(VDBEHDR)
+	$(TCCX) -c $(TOP)/src/vdbeaux.c
+
+vdbefifo.obj:	$(TOP)/src/vdbefifo.c $(VDBEHDR)
+	$(TCCX) -c $(TOP)/src/vdbefifo.c
+
+vdbemem.obj:	$(TOP)/src/vdbemem.c $(VDBEHDR)
+	$(TCCX) -c $(TOP)/src/vdbemem.c
+
+vtab.obj:	$(TOP)/src/vtab.c $(VDBEHDR)
+	$(TCCX) -c $(TOP)/src/vtab.c
+
+where.obj:	$(TOP)/src/where.c $(HDR)
+	$(TCCX) -c $(TOP)/src/where.c
+
+# Rules for building test programs and for running tests
+#
+tclsqlite3:	$(TOP)/src/tclsqlite.c sqlite3.lib
+	$(TCCX) $(TCL_FLAGS) -DTCLSH=1 /Fetclsqlite3 \
+		$(TOP)/src/tclsqlite.c sqlite3.lib $(LIBTCL) $(THREADLIB)
+
+testfixture$(EXE):	$(TOP)/src/tclsqlite.c sqlite3.lib $(TESTSRC)
+	$(TCCX) $(TCL_FLAGS) -DTCLSH=1 -DSQLITE_TEST=1 -DSQLITE_CRASH_TEST=1 \
+		-DSQLITE_SERVER=1 /Fetestfixture$(EXE) \
+		$(TESTSRC) $(TOP)/src/tclsqlite.c \
+		sqlite3.lib $(LIBTCL) $(THREADLIB)
+
+fulltest:	testfixture$(EXE) sqlite3$(EXE)
+	testfixture$(EXE) $(TOP)/test/all.test
+
+test:	testfixture$(EXE) sqlite3$(EXE)
+	testfixture$(EXE) $(TOP)/test/quick.test
+
+sqlite3_analyzer$(EXE):	$(TOP)/src/tclsqlite.c sqlite3.lib $(TESTSRC) \
+			$(TOP)/tool/spaceanal.tcl
+	sed \
+	  -e '/^#/d' \
+	  -e 's,\\,\\\\,g' \
+	  -e 's,",\\",g' \
+	  -e 's,^,",' \
+	  -e 's,$$,\\n",' \
+	  $(TOP)/tool/spaceanal.tcl >spaceanal_tcl.h
+	$(TCCX) $(TCL_FLAGS) -DTCLSH=2 -DSQLITE_TEST=1 -DSQLITE_DEBUG=1 \
+		/Fesqlite3_analyzer$(EXE) $(TESTSRC) $(TOP)/src/tclsqlite.c \
+		sqlite3.lib $(LIBTCL) $(THREADLIB)
+
+TEST_EXTENSION = $(SHPREFIX)testloadext.$(SO)
+$(TEST_EXTENSION): $(TOP)/src/test_loadext.c
+	$(MKSHLIB) $(TOP)/src/test_loadext.c /Fe$(TEST_EXTENSION)
+
+extensiontest: testfixture$(EXE) $(TEST_EXTENSION)
+	testfixture$(EXE) $(TOP)/test/loadext.test
+
+# Rules used to build documentation
+#
+arch.html:	$(TOP)/www/arch.tcl
+	tclsh $(TOP)/www/arch.tcl >arch.html
+
+autoinc.html:	$(TOP)/www/autoinc.tcl
+	tclsh $(TOP)/www/autoinc.tcl >autoinc.html
+
+c_interface.html:	$(TOP)/www/c_interface.tcl
+	tclsh $(TOP)/www/c_interface.tcl >c_interface.html
+
+capi3.html:	$(TOP)/www/capi3.tcl
+	tclsh $(TOP)/www/capi3.tcl >capi3.html
+
+capi3ref.html:	$(TOP)/www/capi3ref.tcl
+	tclsh $(TOP)/www/capi3ref.tcl >capi3ref.html
+
+changes.html:	$(TOP)/www/changes.tcl
+	tclsh $(TOP)/www/changes.tcl >changes.html
+
+compile.html:	$(TOP)/www/compile.tcl
+	tclsh $(TOP)/www/compile.tcl >compile.html
+
+copyright.html:	$(TOP)/www/copyright.tcl
+	tclsh $(TOP)/www/copyright.tcl >copyright.html
+
+copyright-release.html:	$(TOP)/www/copyright-release.html
+	copy $(TOP)/www/copyright-release.html .
+
+copyright-release.pdf:	$(TOP)/www/copyright-release.pdf
+	copy $(TOP)/www/copyright-release.pdf .
+
+common.tcl:	$(TOP)/www/common.tcl
+	copy $(TOP)/www/common.tcl .
+
+conflict.html:	$(TOP)/www/conflict.tcl
+	tclsh $(TOP)/www/conflict.tcl >conflict.html
+
+datatypes.html:	$(TOP)/www/datatypes.tcl
+	tclsh $(TOP)/www/datatypes.tcl >datatypes.html
+
+datatype3.html:	$(TOP)/www/datatype3.tcl
+	tclsh $(TOP)/www/datatype3.tcl >datatype3.html
+
+different.html:	$(TOP)/www/different.tcl
+	tclsh $(TOP)/www/different.tcl >different.html
+
+docs.html:	$(TOP)/www/docs.tcl
+	tclsh $(TOP)/www/docs.tcl >docs.html
+
+download.html:	$(TOP)/www/download.tcl
+	mkdir -p doc
+	tclsh $(TOP)/www/download.tcl >download.html
+
+faq.html:	$(TOP)/www/faq.tcl
+	tclsh $(TOP)/www/faq.tcl >faq.html
+
+fileformat.html:	$(TOP)/www/fileformat.tcl
+	tclsh $(TOP)/www/fileformat.tcl >fileformat.html
+
+formatchng.html:	$(TOP)/www/formatchng.tcl
+	tclsh $(TOP)/www/formatchng.tcl >formatchng.html
+
+index.html:	$(TOP)/www/index.tcl last_change
+	tclsh $(TOP)/www/index.tcl >index.html
+
+lang.html:	$(TOP)/www/lang.tcl
+	tclsh $(TOP)/www/lang.tcl doc >lang.html
+
+pragma.html:	$(TOP)/www/pragma.tcl
+	tclsh $(TOP)/www/pragma.tcl >pragma.html
+
+lockingv3.html:	$(TOP)/www/lockingv3.tcl
+	tclsh $(TOP)/www/lockingv3.tcl >lockingv3.html
+
+sharedcache.html: $(TOP)/www/sharedcache.tcl
+	tclsh $(TOP)/www/sharedcache.tcl >sharedcache.html
+
+mingw.html:	$(TOP)/www/mingw.tcl
+	tclsh $(TOP)/www/mingw.tcl >mingw.html
+
+nulls.html:	$(TOP)/www/nulls.tcl
+	tclsh $(TOP)/www/nulls.tcl >nulls.html
+
+oldnews.html:	$(TOP)/www/oldnews.tcl
+	tclsh $(TOP)/www/oldnews.tcl >oldnews.html
+
+omitted.html:	$(TOP)/www/omitted.tcl
+	tclsh $(TOP)/www/omitted.tcl >omitted.html
+
+opcode.html:	$(TOP)/www/opcode.tcl $(TOP)/src/vdbe.c
+	tclsh $(TOP)/www/opcode.tcl $(TOP)/src/vdbe.c >opcode.html
+
+optimizer.html:	$(TOP)/www/optimizer.tcl
+	tclsh $(TOP)/www/optimizer.tcl >optimizer.html
+
+optoverview.html:	$(TOP)/www/optoverview.tcl
+	tclsh $(TOP)/www/optoverview.tcl >optoverview.html
+
+quickstart.html:	$(TOP)/www/quickstart.tcl
+	tclsh $(TOP)/www/quickstart.tcl >quickstart.html
+
+speed.html:	$(TOP)/www/speed.tcl
+	tclsh $(TOP)/www/speed.tcl >speed.html
+
+sqlite.html:	$(TOP)/www/sqlite.tcl
+	tclsh $(TOP)/www/sqlite.tcl >sqlite.html
+
+support.html:	$(TOP)/www/support.tcl
+	tclsh $(TOP)/www/support.tcl >support.html
+
+tclsqlite.html:	$(TOP)/www/tclsqlite.tcl
+	tclsh $(TOP)/www/tclsqlite.tcl >tclsqlite.html
+
+vdbe.html:	$(TOP)/www/vdbe.tcl
+	tclsh $(TOP)/www/vdbe.tcl >vdbe.html
+
+version3.html:	$(TOP)/www/version3.tcl
+	tclsh $(TOP)/www/version3.tcl >version3.html
+
+whentouse.html:	$(TOP)/www/whentouse.tcl
+	tclsh $(TOP)/www/whentouse.tcl >whentouse.html
+
+
+# Files to be published on the website.
+#
+DOC = \
+  arch.html \
+  autoinc.html \
+  c_interface.html \
+  capi3.html \
+  capi3ref.html \
+  changes.html \
+  compile.html \
+  copyright.html \
+  copyright-release.html \
+  copyright-release.pdf \
+  conflict.html \
+  datatypes.html \
+  datatype3.html \
+  different.html \
+  docs.html \
+  download.html \
+  faq.html \
+  fileformat.html \
+  formatchng.html \
+  index.html \
+  lang.html \
+  lockingv3.html \
+  mingw.html \
+  nulls.html \
+  oldnews.html \
+  omitted.html \
+  opcode.html \
+  optimizer.html \
+  optoverview.html \
+  pragma.html \
+  quickstart.html \
+  sharedcache.html \
+  speed.html \
+  sqlite.html \
+  support.html \
+  tclsqlite.html \
+  vdbe.html \
+  version3.html \
+  whentouse.html
+
+doc:	common.tcl $(DOC)
+	mkdir -p doc
+	ren $(DOC) doc
+	copy $(TOP)/www/*.gif $(TOP)/art/*.gif doc
+
+# Standard install and cleanup targets
+#
+install:	sqlite3 sqlite3.lib sqlite3.h
+	copy sqlite3 $(BINDIR)
+	copy sqlite3.lib $(LIBDIR)
+	copy sqlite3.h $(INCDIR)
+
+clean:	
+	-del *~ *.obj *.ilk *.pdb sqlite3.exe sqlite3.lib sqlite3.h opcodes.* 2>nul
+	-del lemon.exe lempar.c parse.* sqlite*.tar.gz mkkeywordhash.exe keywordhash.h 2>nul
+	-del *.da *.bb *.bbg gmon.out 2>nul
+	-rd /s /q tsrc 2>nul
+	-del testloadext.dll 2>nul
--- /dev/null	1969-12-31 16:00:00.000000000 -0800
+++ update_ver.cmd	2006-11-23 07:09:03.334906700 -0800
@@ -0,0 +1,4 @@
+@echo off
+for /f %%i in ( ..\VERSION ) do set VERSION=%%i
+for /f "usebackq" %%i in ( `cmd /c sed "s/[^0-9]/ /g" ^< ..\VERSION ^| nawk "{printf \"%%d%%03d%%03d\",$1,$2,$3}"` ) do set VERS_NUM=%%i
+sed -e s/--VERS--/%VERSION%/ -e s/--VERSION-NUMBER--/%VERS_NUM%/ %1
