<%@ MasterClass="Application.Web.Layouts.Main" Theme="Baculum-v2"%>
<com:TContent ID="Main">
	<!-- Header -->
	<header class="w3-container">
		<h5>
			<b><i class="fa fa-hdd"></i> <%[ Volume list ]%></b>
		</h5>
	</header>
	<div class="w3-container tab_item">
		<div class="w3-section">
			<com:Application.Web.Portlets.LabelVolume />
			<com:Application.Web.Portlets.UpdateSlots />
		</div>
		<table id="volume_list" class="w3-table w3-striped w3-hoverable w3-white w3-margin-bottom selectable" style="width: 100%">
			<thead>
				<tr>
					<th></th>
					<th>MediaId</th>
					<th><%[ Name ]%></th>
					<th><%[ Slot ]%></th>
					<th>PoolId</th>
					<th><%[ Pool ]%></th>
					<th>InChanger</th>
					<th>StorageId</th>
					<th><%[ Storage ]%></th>
					<th>DeviceId</th>
					<th><%[ Vol. status ]%></th>
					<th><%[ Enabled ]%></th>
					<th><%[ Recycle ]%></th>
					<th>MediaType</th>
					<th>MediaTypeId</th>
					<th>LabelType</th>
					<th><%[ First written ]%></th>
					<th><%[ Last written ]%></th>
					<th><%[ Vol. bytes ]%></th>
					<th><%[ Max. vol. bytes ]%></th>
					<th><%[ Max. vol. jobs ]%></th>
					<th><%[ Max. vol. files ]%></th>
					<th><%[ Vol. capacity bytes ]%></th>
					<th><%[ Vol. abytes ]%></th>
					<th><%[ Vol. apadding ]%></th>
					<th><%[ Vol. hole bytes ]%></th>
					<th><%[ Vol. holes ]%></th>
					<th><%[ Vol. parts ]%></th>
					<th><%[ Vol. errors ]%></th>
					<th><%[ Vol. writes ]%></th>
					<th><%[ Label date ]%></th>
					<th><%[ Vol. jobs ]%></th>
					<th><%[ Vol. files ]%></th>
					<th><%[ Vol. blocks ]%></th>
					<th><%[ Vol. mounts ]%></th>
					<th><%[ Action on purge ]%></th>
					<th><%[ Vol. retention ]%></th>
					<th><%[ Cache retention ]%></th>
					<th><%[ Vol. use duration ]%></th>
					<th><%[ Media addressing ]%></th>
					<th><%[ Vol. read time ]%></th>
					<th><%[ Vol. write time ]%></th>
					<th><%[ Vol. type ]%></th>
					<th><%[ Vol. cloud parts ]%></th>
					<th><%[ Last part bytes ]%></th>
					<th><%[ End file ]%></th>
					<th><%[ End block ]%></th>
					<th>LocationId</th>
					<th><%[ Recycle count ]%></th>
					<th><%[ Initial write ]%></th>
					<th>ScratchPoolId</th>
					<th><%[ Scratch pool ]%></th>
					<th>RecyclePoolId</th>
					<th><%[ Recycle pool ]%></th>
					<th><%[ Comment ]%></th>
					<th><%[ When expire ]%></th>
					<th><%[ Actions ]%></th>
				</tr>
			</thead>
			<tbody id="pool_list_body"></tbody>
			<tfoot>
				<tr>
					<th></th>
					<th>MediaId</th>
					<th><%[ Name ]%></th>
					<th><%[ Slot ]%></th>
					<th>PoolId</th>
					<th><%[ Pool ]%></th>
					<th>InChanger</th>
					<th>StorageId</th>
					<th><%[ Storage ]%></th>
					<th>DeviceId</th>
					<th><%[ Vol. status ]%></th>
					<th><%[ Enabled ]%></th>
					<th><%[ Recycle ]%></th>
					<th>MediaType</th>
					<th>MediaTypeId</th>
					<th>LabelType</th>
					<th><%[ First written ]%></th>
					<th><%[ Last written ]%></th>
					<th><%[ Vol. bytes ]%></th>
					<th><%[ Max. vol. bytes ]%></th>
					<th><%[ Max. vol. jobs ]%></th>
					<th><%[ Max. vol. files ]%></th>
					<th><%[ Vol. capacity bytes ]%></th>
					<th><%[ Vol. abytes ]%></th>
					<th><%[ Vol. apadding ]%></th>
					<th><%[ Vol. hole bytes ]%></th>
					<th><%[ Vol. holes ]%></th>
					<th><%[ Vol. parts ]%></th>
					<th><%[ Vol. errors ]%></th>
					<th><%[ Vol. writes ]%></th>
					<th><%[ Label date ]%></th>
					<th><%[ Vol. jobs ]%></th>
					<th><%[ Vol. files ]%></th>
					<th><%[ Vol. blocks ]%></th>
					<th><%[ Vol. mounts ]%></th>
					<th><%[ Action on purge ]%></th>
					<th><%[ Vol. retention ]%></th>
					<th><%[ Cache retention ]%></th>
					<th><%[ Vol. use duration ]%></th>
					<th><%[ Media addressing ]%></th>
					<th><%[ Vol. read time ]%></th>
					<th><%[ Vol. write time ]%></th>
					<th><%[ Vol. type ]%></th>
					<th><%[ Vol. cloud parts ]%></th>
					<th><%[ Last part bytes ]%></th>
					<th><%[ End file ]%></th>
					<th><%[ End block ]%></th>
					<th>LocationId</th>
					<th><%[ Recycle count ]%></th>
					<th><%[ Initial write ]%></th>
					<th>ScratchPoolId</th>
					<th><%[ Scratch pool ]%></th>
					<th>RecyclePoolId</th>
					<th><%[ Recycle pool ]%></th>
					<th><%[ Comment ]%></th>
					<th><%[ When expire ]%></th>
					<th><%[ Actions ]%></th>
				</tr>
			</tfoot>
		</table>
		<p class="info w3-hide-medium w3-hide-small"><%[ Tip: Use left-click to select table row. Use CTRL + left-click to multiple row selection. Use SHIFT + left-click to add a range of rows to selection. ]%></p>
	</div>
<script type="text/javascript">
var oVolumeList = {
	table: null,
	table_toolbar: null,
	actions: [
		{
			action: 'prune',
			label: '<%[ Prune ]%>',
			value: 'mediaid',
			callback: <%=$this->PruneVolumesAction->ActiveControl->Javascript%>,
			before: function() {
				oBulkActionsModal.show_output(true);
			}
		},
		{
			action: 'purge',
			label: '<%[ Purge ]%>',
			value: 'mediaid',
			callback: <%=$this->PurgeVolumesAction->ActiveControl->Javascript%>,
			before: function() {
				oBulkActionsModal.show_output(true);
			}
		}
	],
	ids: {
		volume_list: 'volume_list',
		volume_list_body: 'volume_list_body'
	},
	init: function() {
		this.set_table();
		this.set_bulk_actions();
		this.set_events();
	},
	set_events: function() {
		document.getElementById(this.ids.volume_list).addEventListener('click', function(e) {
			$(function() {
				this.table_toolbar.style.display = this.table.rows({selected: true}).data().length > 0 ? '' : 'none';
			}.bind(this));
		}.bind(this));
	},
	set_table: function() {
		this.table = $('#' + this.ids.volume_list).DataTable({
			data: <%=json_encode($this->volumes)%>,
			deferRender: true,
			dom: 'lB<"table_toolbar">frtip',
			stateSave: true,
			buttons: [
				'copy', 'csv', 'colvis'
			],
			columns: [
				{
					className: 'details-control',
					orderable: false,
					data: null,
					defaultContent: '<button type="button" class="w3-button w3-blue"><i class="fa fa-angle-down"></i></button>'
				},
				{data: 'mediaid'},
				{data: 'volumename'},
				{data: 'slot'},
				{
					data: 'poolid',
					visible: false
				},
				{
					data: 'pool',
					visible: false
				},
				{
					data: 'inchanger',
					render: function(data, type, row) {
						return (data === 1) ? '<%[ Yes ]%>' : '<%[ No ]%>';
					}
				},
				{
					data: 'storageid',
					visible: false
				},
				{
					data: 'storage',
					visible: false
				},
				{
					data: 'deviceid',
					visible: false
				},
				{data: 'volstatus'},
				{
					data: 'enabled',
					render: function(data, type, row) {
						return (data === 1) ? '<%[ Yes ]%>' : '<%[ No ]%>';
					},
					visible: false
				},
				{
					data: 'recycle',
					render: function(data, type, row) {
						return (data === 1) ? '<%[ Yes ]%>' : '<%[ No ]%>';
					},
					visible: false
				},
				{data: 'mediatype'},
				{
					data: 'mediatypeid',
					visible: false
				},
				{
					data: 'labeltype',
					visible: false
				},
				{
					data: 'firstwritten',
					visible: false
				},
				{data: 'lastwritten'},
				{
					data: 'volbytes',
					render: function (data, type, row) {
						var s;
						if (type == 'display') {
							s = Units.get_formatted_size(data)
						} else {
							s = data;
						}
						return s;
					}
				},
				{
					data: 'maxvolbytes',
					render: function (data, type, row) {
						var s;
						if (type == 'display') {
							s = Units.get_formatted_size(data)
						} else {
							s = data;
						}
						return s;
					},
					visible: false
				},
				{
					data: 'maxvoljobs',
					visible: false
				},
				{
					data: 'maxvolfiles',
					visible: false
				},
				{
					data: 'volcapacitybytes',
					render: function (data, type, row) {
						var s;
						if (type == 'display') {
							s = Units.get_formatted_size(data)
						} else {
							s = data;
						}
						return s;
					},
					visible: false
				},
				{
					data: 'volabytes',
					render: function (data, type, row) {
						var s;
						if (type == 'display') {
							s = Units.get_formatted_size(data)
						} else {
							s = data;
						}
						return s;
					},
					visible: false
				},
				{
					data: 'volapadding',
					visible: false
				},
				{
					data: 'volholebytes',
					render: function (data, type, row) {
						var s;
						if (type == 'display') {
							s = Units.get_formatted_size(data)
						} else {
							s = data;
						}
						return s;
					},
					visible: false
				},
				{
					data: 'volholes',
					visible: false
				},
				{
					data: 'volparts',
					visible: false
				},
				{
					data: 'volerrors',
					visible: false
				},
				{
					data: 'volwrites',
					visible: false
				},
				{
					data: 'labeldate',
					visible: false
				},
				{
					data: 'voljobs',
					visible: false
				},
				{
					data: 'volfiles',
					visible: false
				},
				{
					data: 'volblocks',
					visible: false
				},
				{
					data: 'volmounts',
					visible: false
				},
				{
					data: 'actiononpurge',
					render: function(data, type, row) {
						return (data === 1) ? '<%[ Yes ]%>' : '<%[ No ]%>';
					},
					visible: false
				},
				{
					data: 'volretention',
					render: function(data, type, row) {
						var t;
						if (type == 'display') {
							var ret = Units.format_time_period(data);
							t = ret.value + ' ' + ret.format;
						} else {
							t = data;
						}
						return t;
					},
					visible: false
				},
				{
					data: 'cacheretention',
					render: function(data, type, row) {
						var t;
						if (type == 'display') {
							var ret = Units.format_time_period(data);
							t = ret.value + ' ' + ret.format;
						} else {
							t = data;
						}
						return t;
					},
					visible: false
				},
				{
					data: 'voluseduration',
					render: function(data, type, row) {
						var t;
						if (type == 'display') {
							var ret = Units.format_time_period(data);
							t = ret.value + ' ' + ret.format;
						} else {
							t = data;
						}
						return t;
					},
					visible: false
				},
				{
					data: 'mediaaddressing',
					visible: false
				},
				{
					data: 'volreadtime',
					render: function(data, type, row) {
						var t;
						if (type == 'display') {
							var ret = Units.format_time_period(data);
							t = ret.value + ' ' + ret.format;
						} else {
							t = data;
						}
						return t;
					},
					visible: false
				},
				{
					data: 'volwritetime',
					render: function(data, type, row) {
						var t;
						if (type == 'display') {
							var ret = Units.format_time_period(data);
							t = ret.value + ' ' + ret.format;
						} else {
							t = data;
						}
						return t;
					},
					visible: false
				},
				{
					data: 'voltype',
					visible: false
				},
				{
					data: 'volcloudparts',
					visible: false
				},
				{
					data: 'lastpartbytes',
					render: function (data, type, row) {
						var s;
						if (type == 'display') {
							s = Units.get_formatted_size(data)
						} else {
							s = data;
						}
						return s;
					},
					visible: false
				},
				{
					data: 'endfile',
					visible: false
				},
				{
					data: 'endblock',
					visible: false
				},
				{
					data: 'locationid',
					visible: false
				},
				{
					data: 'recyclecount',
					visible: false
				},
				{
					data: 'initialwrite',
					visible: false
				},
				{
					data: 'scratchpoolid',
					visible: false
				},
				{
					data: 'scratchpool',
					visible: false
				},
				{
					data: 'recyclepoolid',
					visible: false
				},
				{
					data: 'recyclepool',
					visible: false
				},
				{
					data: 'comment',
					visible: false
				},
				{
					data: 'whenexpire',
					visible: false
				},
				{
					data: 'mediaid',
					render: function(data, type, row) {
						var btn = document.createElement('BUTTON');
						btn.className = 'w3-button w3-green';
						btn.type = 'button';
						var i = document.createElement('I');
						i.className = 'fa fa-list-ul';
						var label = document.createTextNode(' <%[ Details ]%>');
						btn.appendChild(i);
						btn.innerHTML += '&nbsp';
						btn.appendChild(label);
						btn.setAttribute('onclick', "document.location.href = '/web/volume/" + data + "/'");
						return btn.outerHTML;
					}
				}
			],
			responsive: {
				details: {
					type: 'column'
				}
			},
			columnDefs: [{
				className: 'control',
				orderable: false,
				targets: 0
			},
			{
				className: "dt-center",
				targets: [ 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56 ]
			},
			{
				className: "dt-body-right",
				targets: [ 18 ]
			}],
			select: {
				style:    'os',
				selector: 'td:not(:last-child):not(:first-child)',
				blurable: false
			},
			order: [3, 'asc'],
			initComplete: function () {
				this.api().columns([2, 3, 6, 10, 13]).every(function () {
					var column = this;
					var select = $('<select><option value=""></option></select>')
					.appendTo($(column.footer()).empty())
					.on('change', function () {
						var val = dtEscapeRegex(
							$(this).val()
						);
						column
						.search(val ? '^' + val + '$' : '', true, false)
						.draw();
					});
					if (column[0][0] == 3) {
						column.cells('', column[0]).render('display').unique().sort(sort_natural).each(function(d, j) {
							if (column.search() == '^' + dtEscapeRegex(d) + '$') {
								select.append('<option value="' + d + '" selected>' + d + '</option>');
							} else {
								select.append('<option value="' + d + '">' + d + '</option>');
							}
						});
					} else {
						column.cells('', column[0]).render('display').unique().sort().each(function(d, j) {
							if (column.search() == '^' + dtEscapeRegex(d) + '$') {
								select.append('<option value="' + d + '" selected>' + d + '</option>');
							} else {
								select.append('<option value="' + d + '">' + d + '</option>');
							}
						});
					}
				});
			}
		});
	},
	set_bulk_actions: function() {
		this.table_toolbar = get_table_toolbar(this.table, this.actions, {
			actions: '<%[ Actions ]%>',
			ok: '<%[ OK ]%>'
		});
	}
};
oVolumeList.init();
/**
 * Defne bulk actions output id here because expression tags (< % = % >) cannot
 * be defined in the TCallback ClientSide properties.
 */
var bulk_actions_output_id = '<%=$this->SourceTemplateControl->BulkActions->BulkActionsOutput->ClientID%>';
</script>
<com:TCallback ID="PruneVolumesAction" OnCallback="pruneVolumes">
	<prop:ClientSide.OnLoading>
		oBulkActionsModal.clear_output(bulk_actions_output_id);
		oBulkActionsModal.show_loader(true);
	</prop:ClientSide.OnLoading>
	<prop:ClientSide.OnComplete>
		oBulkActionsModal.show_loader(false);
	</prop:ClientSide.OnComplete>
</com:TCallback>
<com:TCallback ID="PurgeVolumesAction" OnCallback="purgeVolumes">
	<prop:ClientSide.OnLoading>
		oBulkActionsModal.clear_output(bulk_actions_output_id);
		oBulkActionsModal.show_loader(true);
	</prop:ClientSide.OnLoading>
	<prop:ClientSide.OnComplete>
		oBulkActionsModal.show_loader(false);
	</prop:ClientSide.OnComplete>
</com:TCallback>
<com:Application.Web.Portlets.BulkActionsModal
	ID="BulkActions"
	RefreshPageBtn="true"
	/>
</com:TContent>
